x1=rnorm(n, sd=sqrt(sigma[1,1]))
x1=rnorm(1, sd=sqrt(cov[1,1]))
x2=rnorm(1, sd=sqrt(cov[2,2]))
x3=rnorm(1, sd=sqrt(cov[3,3]))
x1=rnorm(1, sd=sqrt(cov[1,1])))
x1=rnorm(1, sd=sqrt(cov[1,1]))
n = 10000
cov = matrix(c(20,10,10,10,20,12,10,12,17),nrow = 3, ncol = 3, byrow = TRUE)
mean = matrix(c(0,0,0),nrow = 3,ncol = 1,byrow = TRUE)
x1=rnorm(1, sd=sqrt(cov[1,1]))
x2=rnorm(1, sd=sqrt(cov[2,2]))
x3=rnorm(1, sd=sqrt(cov[3,3]))
x = c(x1,x2,x3)
x
x = [c(x1,x2,x3),]
x = [c(x1,x2,x3),]
x = c(x1,x2,x3),]
x = c(x1,x2,x3)
read.csv("http://eeyore.ucdavis.edu/stat135/data/hw3_2.csv", header=TRUE)
a3 = read.csv("http://eeyore.ucdavis.edu/stat135/data/hw3_2.csv", header=TRUE)
a3
head(a3)
mu = colMeans(a3)
mu
sig = cov(a3)
sig
mahalanobis(a3, 0, diag(ncol(a3))=rowSums(a3*a3))
mahalanobis(a3, 0, diag(ncol(a3))==rowSums(a3*a3))
test = mahalanobis(a3, 0, diag(ncol(a3)) == rowSums(a3*a3))
?mahalanobis
test = mahalanobis(a3, mu, sig);n=dim(a3)[1];p=dim(a3)[2]
test
density(test)
plot(density(test))
mu = colMeans(a3)
cov = cov(a3)
dis = mahalanobis(a3, mu, cov);n=dim(a3)[1];p=dim(a3)[2]
plot(density(dis))
qqplot(qchisq(ppoints(n), df=p))
qqplot(qchisq(ppoints(n), df=p),dis)
abline(0,1)
#graphing the densities of the mahalanobis distance
dis = mahalanobis(a3, mu, cov);n=dim(a3)[1];p=dim(a3)[2]
plot(density(dis))
#qqplot for testing
qqplot(qchisq(ppoints(n), df=p),dis)
abline(0,1)
dis = mahalanobis(a3, mu, cov);n=dim(a3)[1];p=dim(a3)[2]
plot(density(dis))
mu
cov
hypothesis
#Keol Choy - 997509915
#Hw3
#Problem 3
a3 = read.csv("http://eeyore.ucdavis.edu/stat135/data/hw3_2.csv", header=TRUE)
mu = colMeans(a3)
cov = cov(a3)
#graphing the densities of the mahalanobis distance
dis = mahalanobis(a3, mu, cov);n=dim(a3)[1];p=dim(a3)[2]
plot(density(dis))
#qqplot for testing
qqplot(qchisq(ppoints(n), df=p),dis)
abline(0,1)
#Problem 4
#mu and cov are already the results???
mu
cov
#Problem 5
test5 = c(11,-5,30.5)
diff = matrix(mu - test5)
tval = (55%*%t(diff))%*%solve(cov)%*%diff
#find f critical
crit = ((55-1)*3)/(55-3)*qf(.975,3,52)
#8.25 < critical of 10.52, so don't reject H0
#Problem 6
open3d(windowRect = c(00,00, 1000, 5760) ) #create window for plotting
plot3d(a3, box=FALSE, col="steelblue", type="s", size=1.5,alpha=0.75) #Create scatter plot with question 3 data
plot3d(ellipse3d(x = cov, centre=mu), col="springgreen", alpha=0.25, add = TRUE, level=0.95) #create confidence ellipse centered at muhat (xbar)
plot3d(ellipse3d(x = (1/55)*cov, centre=mu), col="purple", alpha=0.35, add = TRUE, level=0.95) #confidence region for mu based on xbar distribution
points3d(t(muhat), size = 10, col = "red") #add the point Xbar to the plot
points3d(t(munot), size = 10, col = "black") #add the point munot to the plot
rgl.snapshot("Question6", fmt="png", top=TRUE ) #save the file
eig=eigen(cov)
c_sq1=3*(54)/52*qf(.95, df1=3, df2=52)
#half axes lengthes:
xax=sqrt(eig$value[1]*c_sq1)
yax=sqrt(eig$value[2]*c_sq1)
zax=sqrt(eig$value[3]*c_sq1)
#Problem 7
a7 = read.csv("http://eeyore.ucdavis.edu/stat135/data/hw3_2_all")
mu2 = colMeans(a7)
cov2 = cov(a7)
#reuse test5 for testing
diff2 = matrix(mu2 - test5)
tval = (100%*%t(diff2))%*%solve(cov2)%*%diff2
#find f critical
crit2 = ((100-1)*3)/(100-3)*qf(.975,3,97)
#16.32 > crit (9.96) -> reject H0
install.packages("rgl")
a3 = read.csv("http://eeyore.ucdavis.edu/stat135/data/hw3_2.csv", header=TRUE)
mu = colMeans(a3)
cov = cov(a3)
#graphing the densities of the mahalanobis distance
dis = mahalanobis(a3, mu, cov);n=dim(a3)[1];p=dim(a3)[2]
plot(density(dis))
#qqplot for testing
qqplot(qchisq(ppoints(n), df=p),dis)
abline(0,1)
plot(density(dis), main="density of distance")
qqplot(qchisq(ppoints(n), df=p),dis, main="qqplot of distance")
abline(0,1)
mu
cov
#Problem 5
test5 = c(11,-5,30.5)
diff = matrix(mu - test5)
tval = (55%*%t(diff))%*%solve(cov)%*%diff
#find f critical
crit = ((55-1)*3)/(55-3)*qf(.95,3,52)
crit
tval
open3d(windowRect = c(00,00, 1000, 5760) ) #create window for plotting
library(rgl)
open3d(windowRect = c(00,00, 1000, 5760) ) #create window for plotting
plot3d(a3, box=FALSE, col="steelblue", type="s", size=1.5,alpha=0.75) #Create scatter plot with question 3 data
plot3d(ellipse3d(x = cov, centre=mu), col="springgreen", alpha=0.25, add = TRUE, level=0.95) #create confidence ellipse centered at muhat (xbar)
plot3d(ellipse3d(x = (1/55)*cov, centre=mu), col="purple", alpha=0.35, add = TRUE, level=0.95) #confidence region for mu based on xbar distribution
a7 = read.csv("http://eeyore.ucdavis.edu/stat135/data/hw3_2_all")
mu2 = colMeans(a7)
cov2 = cov(a7)
#reuse test5 for testing
diff2 = matrix(mu2 - test5)
tval2 = (100%*%t(diff2))%*%solve(cov2)%*%diff2
#find f critical
crit2 = ((100-1)*3)/(100-3)*qf(.95,3,97)
#16.32 > crit (8.26) -> reject H0
mu2
cov2
open3d(windowRect = c(00,00, 1000, 5760) ) #create window for plotting
plot3d(a7, box=FALSE, col="steelblue", type="s", size=1.5,alpha=0.75) #Create scatter plot with question 7 data
plot3d(ellipse3d(x = cov, centre=mu), col="green", alpha=0.25, add = TRUE, level=0.95) #create confidence ellipse centered at muhat (xbar)
plot3d(ellipse3d(x = (1/55)*cov, centre=mu), col="green", alpha=0.35, add = TRUE, level=0.95) #confidence region for mu based on xbar distribution
plot3d(ellipse3d(x = cov2, centre=mu2), col="purple", alpha=0.25, add = TRUE, level=0.95) #create confidence ellipse centered at muhat (xbar)
plot3d(ellipse3d(x = (1/100)*cov, centre=mu2), col="purple", alpha=0.35, add = TRUE, level=0.95) #confidence region for mu based on xbar distribution
a=c(1,-1,0)
q=sqrt(t(a)%*%cov%*%(a)/100)*qt(.975, 99)
diff8=sum(tf(a)*mu2) #finds the difference in means
c(lower=diff8-q, upper=diff8+q)
a=c(1,-1,0) #testing vector
#plug and chug equation with interval with t is alpha/2
q=sqrt(t(a)%*%cov%*%(a)/100)*qt(.975, 99)
diff8=sum(tf(a)*mu2) #finds the difference in means
c(lower=diff8-q, upper=diff8+q)
a=c(1,-1,0) #testing vector
#plug and chug equation with interval with t is alpha/2
q=sqrt(t(a)%*%cov%*%(a)/100)*qt(.975, 99)
diff8=sum(t(a)*mu2) #finds the difference in means
c(lower=diff8-q, upper=diff8+q)
interval = c(lower=diff8-q, upper=diff8+q)
sd(a3)
cov2
se2 = qt(.9875,99)*(.05/(2*2))*sqrt(49.08733)
se2
mu
mu2
+ se2)
c
ci2 = c(mu2[1] - se2, mu2[1] + se2)
ci2 = c(mu2[1] - se2, mu2[1] + se2)
ci3 = c(mu2[2] - se3, mu2[2] + se3)
ci4 = c(mu2[3] - se4, mu2[3] + se4)
qt
se3 = qt(.9875,99)*(.05/(2*2))*sqrt(20.1109)
se4 = qt(.9875,99)*(.05/(2*2))*sqrt(85.88967)
ci2 = c(mu2[1] - se2, mu2[1] + se2)
ci3 = c(mu2[2] - se3, mu2[2] + se3)
ci4 = c(mu2[3] - se4, mu2[3] + se4)
ci2
ci3
ci4
se2
se
3
se3
se4
se = qt(.9875, 99)*sqrt(cov2/100)
bonf=qt(1-.05/4, 99)
qz=bonf*sqrt(sz/n)
mean = t(tmat)%*%mu2
tmat = matrix(c(1,-1,0,.5,.5,0), 3,2)
mean = t(tmat)%*%mu2
ch = t(tmat)%*%Cov2%*%tmat
ch = t(tmat)%*%cov2%*%tmat
se = qt(.9875, 99)*sqrt(ch/100)
se
mean - se
mean
se
mean - se[1,]
mean + se[2,]
mean - c(se[1,1], se[2,2])
qt(1-.05/4, 99)
.05/4
1-.0125
lower = mean - c(se[1,1], se[2,2])
upper = mean + c(se[1,1], se[2,2])
lower
upper
a2=matrix(c(1,-1,0,.5,.5,0), 3,2)
a2x=t(a2)%*%xbar2
a2x=t(a2)%*%mu2
sz=t(a2)%*%cov2%*%a2
bonf=qt(1-.05/4, 99)
qz=bonf*sqrt(sz/n)
qz
se
n
n = 100
tmat = matrix(c(1,-1,0,.5,.5,0), 3,2)
mean = t(tmat)%*%mu2
ch = t(tmat)%*%cov2%*%tmat
se = qt(.9875, 99)*sqrt(ch/100)
se
qz
bonf
qt(.9875, 99)
sqrt(ch/100)
sqrt(sz/n)
se = qt(.9875, 99)%*%sqrt(ch/100)
se = qt(.9875, 99)*sqrt(ch/100)
qz=bonf*sqrt(sz/n)
qz
se
lower = mean - c(se[1,1], se[2,2])
upper = mean + c(se[1,1], se[2,2])
lower
upper
mean = t(tmat)%*%mu2
mean
a2x
data.frame(lower=mean-c(se[1,1], se[2,2]), upper=mean+c(se[1,1], se[2,2]))
mean
se
a2x
qz
data.frame(lower=mean-c(se[1,1], se[2,2]), upper=mean+c(se[1,1], se[2,2]))
data.frame(lower=a2x-c(qz[1,1], qz[2,2]), upper=a2x+c(qz[1,1], qz[2,2]))
data.frame(lower=mean-c(se[1,1], se[2,2]), upper=mean+c(se[1,1], se[2,2]))
data.frame(lower=a2x-c(qz[1,1], qz[2,2]), upper=a2x+c(qz[1,1], qz[2,2]))
mu2
mu
cov2
cov
cov2
mu9 = matrix(c(9,9))
cov9 = matrix(c(24,-12,-12,10),2,2)
data = mvrnorm(n=20,mu9,cov9)
cov9a = cov(data)
eigen(cov9)
eigen(cov9a)
mu9 = matrix(c(9,9))
cov9 = matrix(c(24,-12,-12,10),2,2)
data = mvrnorm(n=20,mu9,cov9)
cov9a = cov(data)
library(MASS)
mu9 = matrix(c(9,9))
cov9 = matrix(c(24,-12,-12,10),2,2)
data = mvrnorm(n=20,mu9,cov9)
cov9a = cov(data)
eigen(cov9)
eigen(cov9a)
plot(ellipse(cov9a,centre=mu9),type="l", col="blue")
lines(ellipse(cov9,centre=mu9),type="l",col="red")
install.packages("ellipse")
library(ellipse)
plot(ellipse(cov9a,centre=mu9),type="l", col="blue")
lines(ellipse(cov9,centre=mu9),type="l",col="red")
eigen(cov9a)
plot(ellipse(cov9a,centre=mu9),type="l", col="blue")
lines(ellipse(cov9,centre=mu9),type="l",col="red")
mu2
cov2
plot(ellipse(cov9,centre=mu9),type="l",col="red")
lines(ellipse(cov9a,centre=mu9),type="l", col="blue")
cov9a
eigen(cov9)
eigen(cov9a)
plot(ellipse(cov9,centre=mu9),type="l",col="red")
lines(ellipse(cov9a,centre=mu9),type="l", col="blue")
plot(ellipse(cov9,centre=mu9),type="l",col="red", main="sample vs actual (red)")
lines(ellipse(cov9a,centre=mu9),type="l", col="blue")
Sigma
repeat1=lapply(1:200, function(x) cov(mvrnorm(n=20, mu=c(0,0), cov9)))
repeat1
repeat1[1,]
repeat1[1]
dim(repeat[1,])
dim(repeat1[1])
repeat1=lapply(1:200, function(x) cov(mvrnorm(n=20, mu=c(0,0), Sigma = cov9)))
repeat1
repeat1=lapply(1:200, function(x) cov(mvrnorm(n=20, mu=c(0,0), cov9)))
plot(0,0, xlim=c(-17,17), ylim=c(-12,12), type='l', main="n=20")
lapply(1:200, function(x) lines(ellipse(sample1[[x]])))
lapply(1:200, function(x) lines(ellipse(repeat1[[x]])))
repeat1=lapply(1:200, function(x) cov(mvrnorm(n=20, mu=c(0,0), cov9)))
plot(0,0, xlim=c(-17,17), ylim=c(-12,12), type='l', main="n=20")
lapply(1:200, function(x) lines(ellipse(repeat1[[x]])))
lines(ellipse(cov9), type='l', col="green", lwd=5)
lines(ellipse(cov9), type='l', col="red")
repeat1=lapply(1:200, function(x) cov(mvrnorm(n=20, mu=c(0,0), cov9)))
plot(0,0, xlim=c(-17,17), ylim=c(-12,12), type='l', main="n=20")
lapply(1:200, function(x) lines(ellipse(repeat1[[x]])))
lines(ellipse(cov9), type='l', col="red")
lines(ellipse(cov9), type='l', col="red", lwd=2)
eig.samp=t(sapply(1:200, function(x) eigen(sample1[[x]])$values))
eig.samp=t(sapply(1:200, function(x) eigen(repeat1[[x]])$values))
plot(eig.samp)
plot(density(eig.samp))
eig.samp=t(sapply(1:200, function(x) eigen(repeat1[[x]])$values))
cov9
lines(density(eigencov9a[,1]), col="red")
lines(density(eign(cov9a)[,1]), col="red")
lines(density(eigen(cov9a)[,1]), col="red")
repeat2=lapply(1:200, function(x) cov(mvrnorm(n=100, mu=c(0,0), cov9)))
plot(0,0, xlim=c(-17,17), ylim=c(-12,12), type='l', main="200 ellipse of samples (n = 100)")
lapply(1:200, function(x) lines(ellipse(repeat2[[x]])))
lines(ellipse(cov9), type='l', col="red", lwd=2)
repeat1=lapply(1:200, function(x) cov(mvrnorm(n=20, mu=c(0,0), cov9)))
plot(0,0, xlim=c(-17,17), ylim=c(-12,12), type='l', main="200 ellipse of samples n = 20")
lapply(1:200, function(x) lines(ellipse(repeat1[[x]])))
lines(ellipse(cov9), type='l', col="red", lwd=2)
eval2 = t(sapply(1:200, function(x) eigen(repeat2/[[x]])$values))
eval = t(sapply(1:200, function(x) eigen(repeat1[[x]])$values))
eval2 = t(sapply(1:200, function(x) eigen(repeat2[[x]])$values))
dim(eval)
plot(density(eval[,1]), ylim=c(0, .12), main="Eigenvalue 1 Distribution", col="blue")
lines(density(eig.samp2[,1]), col="red")
lines(density(eval2[,1]), col="red")
abline(v=eigen(sigma)$values[1])
abline(v=eigen(cov9)$values[1])
plot(density(eval[,2]), ylim=c(0, 1), main="Eigenvalue 2 Distribution", col="blue")
lines(density(eval2[,2]), col="red")
plot(density(eval[,1]), ylim=c(0, .12), main="Distribution of Eigen 1", col="red")
lines(density(eval2[,1]), col="blue")
#Eigen 2 Distribution
plot(density(eval[,2]), ylim=c(0, 1), main="Distribution of Eigen 1", col="red")
lines(density(eval2[,2]), col="blue")
plot(density(eval[,1]), ylim=c(0, .12), main="Distribution of Eigen 1", col="red")
lines(density(eval2[,1]), col="blue")
#Eigen 2 Distribution
plot(density(eval[,2]), ylim=c(0, 1), main="Distribution of Eigen 2", col="red")
lines(density(eval2[,2]), col="blue")
a = [4, -1; -1,2]
a = matrix(4,-1;1,2)
a = matrix(c(4,-1),c(-1,2))
a = matrix(c(4,-1,-1,2),2)
a
solve(a)
a = c(1,2,3,4)
a
a > 2
a = c((1,2,3,4),c(5,6,7,8))
a
b = c(5,6,7,8)
rbind(a,b)
c = rbind(a,b)
c
c[,i] > 23
c[,2] = 0
c[,2] > 2
sum(c[,2]) > 0
?manova
setwd("C:/Projects/geographyking")
setwd("C:/Projects/geographyking")
setwd("C:/Projects/geographyking/data")
dat = read.csv("master_data.csv")
names(Dat)
names(Dat)
names(dat)
head(data)
head(dat)
dat = dat[,c(2:6)]
head(dat)
hist(dat$totalpop)
sum(dat$totalpop > 300000)
sum(dat$totalpop > 100000)
sub = subset(dat,dat$totalpop <= 100000)
hist(sub)
hist(sub$totalpop)
sum(sub$totalpop < 100000 & sub$totalpop > 50000)
sum(sub$totalpop < 100000 & sub$totalpop >= 50000)
sum(sub$totalpop < 100000 & sub$totalpop >= 30000)
sum(sub$totalpop < 100000 & sub$totalpop >= 10000)
sum(sub$totalpop <=10000)
sub2 = subset(dat,dat$totalpop <=10000)
hist(sub2)
hist(sub2$totalpop)
sum(sub2$totalpop == 0)
sum(sub2$totalpop == 0)
sum(sub2$totalpop == 1)
sum(sub2$totalpop == 2)
sum(sub2$totalpop == 10)
sum(sub$totalpop < 100000 & sub$totalpop >= 10000)
sum(sub$totalpop > 100 & sub$totalpop <10000)
sum(sub$totalpop > 1000 & sub$totalpop <10000)
hclust(dat$totalpop)
hclust(dat$totalpop, method="complete")
hclust(dat$totalpop, method="complete",members=NULL)
hist(sub$totalpop < 100000 & sub$totalpop >= 10000) #4882
hist(top)
hist(mid)
top = subset(dat,dat$totalpop <= 100000) #416 above
mid = subset(dat$totalpop < 100000 & dat$totalpop >= 10000)
bot = subset(dat$totalpop > 1000 & dat$totalpop <10000)
top = subset(dat,dat$totalpop <= 100000) #416 above
mid = subset(dat,dat$totalpop < 100000 & dat$totalpop >= 10000)
bot = subset(dat,dat$totalpop > 1000 & dat$totalpop <10000)
hist(top)
hist(mid)
hist(bot)
hist(top$totalpop)
hist(mid$totalpop)
hist(bot$totalpop)
top = subset(dat,dat$totalpop > 100000) #416 above
mid = subset(dat,dat$totalpop < 100000 & dat$totalpop >= 10000)
bot = subset(dat,dat$totalpop > 1000 & dat$totalpop <10000)
hist(top$totalpop)
hist(top$totalpop) #416
hist(mid$totalpop) #4882
hist(bot$totalpop) #12580
sample(top, 10)
sample(top, 10,replace=FALSE)
sample(top, 10,replace=FALSE)
dim(top)
sample(top, 10,replace=FALSE)
sample.int(top, 10,replace=FALSE)
?sample
sample(top, size=10,replace=FALSE,prob=NULL)
head(top)
sample(top$city, size=10,replace=FALSE,prob=NULL)
sample(top$city, size=10,replace=FALSE,prob=NULL)
sample(top$city, size=10,replace=FALSE,prob=NULL)
sample(top$city, size=10,replace=FALSE,prob=NULL)
sample(top$city, size=10,replace=FALSE,prob=NULL)
sample(top$city, size=10,replace=FALSE,prob=NULL)
sample(top$city, size=10,replace=FALSE,prob=NULL)
sample(top$city, size=10,replace=FALSE,prob=NULL)
sample(top$city, size=10,replace=FALSE,prob=NULL)
sample(top$city, size=10,replace=FALSE,prob=NULL)
prob
sample(top$city, size=10,replace=FALSE,prob=NULL)
a = sample(top$city, size=10,replace=FALSE,prob=NULL)
length(a)
dim(a)
a
length(top$city)
nrow(top)
a = top[sample(nrow(top),10),]
a
top = subset(dat,dat$totalpop > 150000) #416 above
length(top)
length(top)
top = subset(dat,dat$totalpop > 100000) #416 above
length(top)
top = subset(dat,dat$totalpop > 100000) #416 above
nrows(top)
nrow(top)
top = subset(dat,dat$totalpop > 150000) #416 above
nrow(top)
a = top[sample(nrow(top),10),]
a
a
a = top[sample(nrow(top),10),]
a
a = top[sample(nrow(top),10),]
a
a = top[sample(nrow(top),10),]
a
a = top[sample(nrow(top),10),]
a
a = top[sample(nrow(top),10),]
a
a
a = top[sample(nrow(top),10),]
a
nrow(top)
top
top = subset(dat,dat$totalpop > 100000) #244 above
nrow(top)
a = top[sample(nrow(top),10),]
b = mid[sample(nrow(mid),10),]
c = bot[sample(nrow(bot),10),]
a
b
c
c
b
a
a = top[sample(nrow(top),10),]
b = mid[sample(nrow(mid),10),]
c = bot[sample(nrow(bot),10),]
a
b
c
a
a = top[sample(nrow(top),10),]
b = mid[sample(nrow(mid),10),]
c = bot[sample(nrow(bot),10),]
a
b
c
